# Copyright 2016-2022 Kevin Murray/Gekkonid Consulting
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

rule countsketch:
    input:
        P("data/reads/samples/{sample}.fastq.gz"),
    output:
        ct=temp(T("data/kwip/sketch/k{ksize}-s{sketchsize}/{sample}.ct.gz")),
        info=P("data/kwip/sketch/k{ksize}-s{sketchsize}/{sample}.ct.gz.info"),
        tsv=P("data/kwip/sketch/k{ksize}-s{sketchsize}/{sample}.ct.gz.info.tsv"),
    log:
        L("data/log/kwip/sketch/k{ksize}-s{sketchsize}-{sample}.log")
    resources: **rule_resources(config, "countsketch", time_min=60, mem_mb=16000, cores=1)
    conda: "envs/kwip.yml"
    shell:
        "load-into-counting.py"
        "   -N 1"
        "   -x {wildcards.sketchsize}"
        "   -k {wildcards.ksize}"
        "   -b"
        "   -f"
        "   -s tsv"
        "   -T {threads}"
        "   {output.ct}"
        "   {input}"
        " >{log} 2>&1"


rule kwipdist:
    input:
        lambda wc: expand(T("data/kwip/sketch/k{ksize}-s{sketchsize}/{sample}.ct.gz"),
                          ksize=wc.ksize, sketchsize=wc.sketchsize,
                          sample=config["SAMPLESETS"][wc.set]),
    output:
        d=P("data/kwip/{set}~k{ksize}~s{sketchsize}.dist"),
        k=P("data/kwip/{set}~k{ksize}~s{sketchsize}.kern"),
    log:
        L("data/log/kwip/dist/k{ksize}-s{sketchsize}-{set}.log")
    resources: **rule_resources(config, "countsketch", time_min=2880, mem_mb=15000, cores=8)
    conda: "envs/kwip.yml"
    shell:
        "kwip"
        " -d {output.d}"
        " -k {output.k}"
        " -t {threads}"
        " {input}"
        " >{log} 2>&1"


rule unique_kmers:
    input:
        lambda wc: P(expand("data/reads/samples/{sample}.fastq.gz",
                          sample=SAMPLESETS[wc.set])),
    output:
        P("data/readstats/unique-kmers/{set}.tsv"),
    threads:
        27
    params:
        kmersize=config["tool_settings"]["kwip"]["kmer_size"],
    resources: **rule_resources(config, "unique_kmers", time_min=2880, mem_gb=1)
    log:
        L("data/log/readstats/unique-kmers/{set}.log"),
    conda: "envs/kwip.yml"
    shell:
        "( kdm-unique-kmers.py"
        "    -t {threads}"
        "    -k {params.kmersize}"
        "    {input}"
        "    >{output}"
        " ) 2>{log}"


rule mash_sketch_set:
    input:
        lambda wc: P(expand("data/reads/samples/{sample}.fastq.gz",
                          sample=config["SAMPLESETS"][wc.set])),
    output:
        temp(T("data/mash/{set}~k{ksize}~s{sketchsize}.sketch"))
    log:
        L("data/log/mash_sketch_set/{set}~k{ksize}-s{sketchsize}.log")
    resources: **rule_resources(config, "mash_sketch_set", time_min=2880, mem_gb=16, cores=48)
    shell:
        " mash sketch"
        "   -k {wildcards.ksize}"
        "   -s {wildcards.sketchsize}"
        "   -p {threads}"
        "   -o {output}"
        "   {input}"
        " >{log} 2>&1"


rule mash_dist_set:
    input:
        T("data/mash/{set}~k{ksize}~s{sketchsize}.sketch")
    output:
        P("data/mash/{set}~k{ksize}~s{sketchsize}.dist")
    log:
        L("data/log/mash_dist_set/{set}~k{ksize}~s{sketchsize}.log")
    resources: **rule_resources(config, "mash_dist_set", time_min=2880, mem_gb=16, cores=48)
    shell:
        "mash dist"
        "   -p {threads}"
        "   -t" # tabular format
        "   {input} {input}" # needs input twice
        " >{output}"
        " 2>{log}"


rule kwip:
    input:
        [ P(expand("data/kwip/{set}~k{ksize}~s{sketchsize}.dist",
               ksize=config["tool_settings"]["kwip"]["kmer_size"],
               sketchsize=config["tool_settings"]["kwip"]["sketch_size"],
               set=sampleset))
        for sampleset in config["samplesets"]
        if config["samplesets"][sampleset].get("kwip", False)
        ],


rule mash:
    input:
        [ P(expand("data/mash/{set}~k{ksize}~s{sketchsize}.dist",
               ksize=config["tool_settings"]["mash"]["kmer_size"],
               sketchsize=config["tool_settings"]["mash"]["sketch_size"],
               set=sampleset))
        for sampleset in config["samplesets"]
        if config["samplesets"][sampleset].get("mash", False)
        ],


rule denovo:
    input:
        rules.kwip.input,
        rules.mash.input,

