rule qualimap_sample:
    input:
        bam=P("data/alignments/samples/{aligner}/{ref}/{sample}.bam"),
    output:
        bamqc=P(directory("data/alignments/qualimap/samples/{aligner}/{ref}/{sample}/")),
    log:
        L("data/log/qualimap_sample/{aligner}~{ref}~{sample}.log")
    resources: **acanthophis.rule_resources(config, "qualimap_sample", time_min=240, mem_gb=8, cores=8)
    conda: "envs/qualimap.yml"
    shell:
        "( unset DISPLAY; qualimap bamqc"
        "   --java-mem-size=7G"
        "   -bam {input.bam}"
        "   -nt {threads}"
        "   -nr 10000"
        "   -outdir {output}"
        "   {input}"
        " ) >{log} 2>&1"



rule qualimap_datafile:
    input:
        bam=lambda wc: expand("data/alignments/qualimap/samples/{{aligner}}/{{ref}}/{sample}",
                              sample=config["SAMPLESETS"][wc.sampleset]),
    output:
        datafile="data/alignments/qualimap/sampleset/{aligner}~{ref}~{sampleset}.data",
    group: "qualimap_oneset"
    run:
        from pathlib import Path
        with open(output.datafile, "w") as fh:
            for bam in input.bam:
                bam = Path(bam)
                print(str(Path(bam.name).stem), str(bam), sep="\t", file=fh)


rule qualimap_set:
    input:
        bam=lambda wc: P(expand("data/alignments/qualimap/samples/{{aligner}}/{{ref}}/{sample}",
                              sample=config["SAMPLESETS"][wc.sampleset])),
        datafile=T("data/alignments/qualimap/sampleset/{aligner}~{ref}~{sampleset}.data"),
    output:
        P(directory("data/alignments/qualimap/sampleset/{aligner}~{ref}~{sampleset}/")),
    log:
        "data/log/qualimap_sampleset/{aligner}~{ref}~{sampleset}.log"
    resources: **acanthophis.rule_resources(config, "qualimap_set", time_min=240, mem_gb=8, cores=8)
    conda: "envs/qualimap.yml"
    group: "qualimap_oneset"
    shell:
        "( unset DISPLAY; qualimap multi-bamqc"
        "   --java-mem-size=7G"
        "   --data {input.datafile}"
        "   -nr 10000"
        "   -outdir {output}"
        "   {input}"
        " ) >{log} 2>&1"
